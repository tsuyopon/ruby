=begin
mapとmap!の使いについて

mapは要素ごとに処理を行います。
map!を使うと新しく変数を用意することなく上書きすることができる。


mapの記法
配列.map{|ブロック引数|
  処理
}


=end


##############################
# 配列にmapを適用する
##############################
a1 = [100, 200, 300]
a2 = a1.map { |x| x * 2 }
p a2 # [200, 400, 600]

##############################
# 配列にmapを適用する(part2)   
##############################
# 各要素にメソッドを適用するときは以下のように「&:」として省略して記述することができます。
a = ["APPLE", "ORANGE", "GRAPE"]
p a.map(&:downcase) # ["apple", "orange", "grape"]

##############################
# 配列にmap!を適用して配列の中身を上書きする
##############################
animal = ["dog", "cat", "koara","bird"]
animal.map! {|a| a.length}   # 文字数に変換する
p animal

##############################
# ハッシュにmapを適用する
##############################
hash = { "apple" => 100, "orange" => 200, "grape" => 300 }
p hash.map { |key, value| [key, value * 2] } # [["apple", 200], ["orange", 400], ["apple", 600]]

